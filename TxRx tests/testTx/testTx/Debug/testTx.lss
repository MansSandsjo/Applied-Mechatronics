
testTx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000090  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000090  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000104  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000867  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000896  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000224  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000145  00000000  00000000  00000afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000727  00000000  00000000  00000c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001368  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000ad40  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000c0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002861  00000000  00000000  0000c110  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	02 d0       	rcall	.+4      	; 0x46 <main>
  42:	24 c0       	rjmp	.+72     	; 0x8c <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <main>:

#include <util/delay.h>

int main (void)
{
	DDRD  |= 1<<PIND1;
  46:	51 9a       	sbi	0x0a, 1	; 10
	UBRR0H = (BRC >> 8);
  48:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BRC;
  4c:	89 e1       	ldi	r24, 0x19	; 25
  4e:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B = (1 << TXEN0);
  52:	88 e0       	ldi	r24, 0x08	; 8
  54:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  58:	86 e0       	ldi	r24, 0x06	; 6
  5a:	80 93 c2 00 	sts	0x00C2, r24
	printThis2 +=48;
	printThis3 +=48;
	
	while (1)
	{
		UDR0 = printThis1;
  5e:	e6 ec       	ldi	r30, 0xC6	; 198
  60:	f0 e0       	ldi	r31, 0x00	; 0
  62:	91 e3       	ldi	r25, 0x31	; 49
		UDR0 = printThis2;
  64:	80 e3       	ldi	r24, 0x30	; 48
	printThis2 +=48;
	printThis3 +=48;
	
	while (1)
	{
		UDR0 = printThis1;
  66:	90 83       	st	Z, r25
		UDR0 = printThis2;
  68:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6a:	a3 ec       	ldi	r26, 0xC3	; 195
  6c:	b9 e0       	ldi	r27, 0x09	; 9
  6e:	11 97       	sbiw	r26, 0x01	; 1
  70:	f1 f7       	brne	.-4      	; 0x6e <main+0x28>
  72:	00 c0       	rjmp	.+0      	; 0x74 <main+0x2e>
  74:	00 00       	nop
		_delay_ms(10);
		UDR0 = printThis3;
  76:	80 83       	st	Z, r24
  78:	bf e3       	ldi	r27, 0x3F	; 63
  7a:	2d e0       	ldi	r18, 0x0D	; 13
  7c:	33 e0       	ldi	r19, 0x03	; 3
  7e:	b1 50       	subi	r27, 0x01	; 1
  80:	20 40       	sbci	r18, 0x00	; 0
  82:	30 40       	sbci	r19, 0x00	; 0
  84:	e1 f7       	brne	.-8      	; 0x7e <main+0x38>
  86:	00 c0       	rjmp	.+0      	; 0x88 <main+0x42>
  88:	00 00       	nop
  8a:	ed cf       	rjmp	.-38     	; 0x66 <main+0x20>

0000008c <_exit>:
  8c:	f8 94       	cli

0000008e <__stop_program>:
  8e:	ff cf       	rjmp	.-2      	; 0x8e <__stop_program>
